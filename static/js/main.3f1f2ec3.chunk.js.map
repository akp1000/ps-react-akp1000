{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","../config/componentData.js","docs/examples/EyeIcon/ExampleEyeIcon.js","docs/examples/Label/ExampleOptionalLabel.js","docs/examples/Label/ExampleRequiredLabel.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/ExampleProgressBar100Percent.js","docs/examples/ProgressBar/ExampleProgressBar10Percent.js","docs/examples/ProgressBar/ExampleProgressBar60Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/FormItem/FormItem.js","docs/examples/FormItem/Example.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","_ref","htmlFor","label","required","react_default","a","createElement","style","display","color","__webpack_require__","d","__webpack_exports__","components_Label_Label","ProgressBar","getColor","percent","_this","props","getWidthAsPercentOfTotalWidth","parseInt","width","_this$props","this","height","border","backgroundColor","React","Component","defaultProps","components_ProgressBar_ProgressBar","TextInput","htmlId","name","_ref$type","type","_ref$required","onChange","placeholder","value","error","children","Object","objectWithoutProperties","marginBottom","assign","id","className","TextInput_TextInput","PasswordInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","components_PasswordInput_PasswordInput","xmlns","viewBox","transform","fill","cx","cy","r","components_EyeIcon_EyeIcon","module","exports","description","code","examples","inputName","labelText","message","defaultValue","computed","confirmationMessage","onSubmit","minPasswordLength","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ExampleEyeIcon","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleLabel","ExampleAllFeatures","_Users_kabirpatel_dev_ps_react_akp1000_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_kabirpatel_dev_ps_react_akp1000_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_kabirpatel_dev_ps_react_akp1000_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","password","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","target","minLength","getQuality","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","ExampleProgressBar","ExampleProgressBar10Percent","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_1__","ExampleError","ExampleOptional","HelloWorld","ExampleHelloWorld","HelloWorld_HelloWorld","TextInputStyledComponents","Error","styled","div","_templateObject","Input","input","_templateObject2","FieldSet","_templateObject3","TextInputStyledComponents_TextInputStyledComponents","FormItem","e","onTextChange","Example","_useState","useState","_useState2","slicedToArray","setText","components_FormItem_FormItem","TextInputCSSModules","styles","fieldset","inputError","TextInputCSSModules_TextInputCSSModules","TextInputBEM","TextInputBEM_TextInputBEM","RegistrationForm","user","validate","submitted","email","errors","concat","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","components_RegistrationForm_RegistrationForm","console","log","map","./EyeIcon/ExampleEyeIcon","./EyeIcon/ExampleEyeIcon.js","./FormItem/Example","./FormItem/Example.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptionalLabel","./Label/ExampleOptionalLabel.js","./Label/ExampleRequiredLabel","./Label/ExampleRequiredLabel.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/ExampleProgressBar100Percent","./ProgressBar/ExampleProgressBar100Percent.js","./ProgressBar/ExampleProgressBar10Percent","./ProgressBar/ExampleProgressBar10Percent.js","./ProgressBar/ExampleProgressBar60Percent","./ProgressBar/ExampleProgressBar60Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","webpackContext","req","webpackContextResolve","o","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","toggleCode","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","docs_CodeExample","Props","ComponentPage","component","docs_Example","docs_Props","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f1f2ec3.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Label with required field display, htmlFor, and block styling */\nconst Label = ({ htmlFor, label, required }) => {\n  return (\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: \"red\" }}> *</span>}\n    </label>\n  );\n};\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export { default } from \"./Label\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**Progress Bar */\nclass ProgressBar extends React.Component {\n  getColor = percent => {\n    if (this.props.percent === 100) return \"green\";\n    return this.props.percent > 50 ? \"lightgreen\" : \"red\";\n  };\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  };\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: \"solid 1px lightgray\", width: width }}>\n        <div\n          style={{\n            width: this.getWidthAsPercentOfTotalWidth(),\n            height,\n            backgroundColor: this.getColor(percent)\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","export { default } from \"./ProgressBar\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: \"solid 1px red\" }}\n        {...props}\n      />\n      {children}\n      {error && (\n        <div className=\"error\" style={{ color: \"red\" }}>\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export { default } from \"./TextInput\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../ProgressBar\";\nimport EyeIcon from \"../EyeIcon\";\nimport TextInput from \"../TextInput\";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    };\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  };\n\n  render() {\n    const {\n      htmlId,\n      value,\n      label,\n      error,\n      onChange,\n      placeholder,\n      maxLength,\n      showVisibilityToggle,\n      quality,\n      ...props\n    } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? \"text\" : \"password\"}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}\n      >\n        {showVisibilityToggle && (\n          <a\n            href=\"\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            <EyeIcon />\n          </a>\n        )}\n        {value.length > 0 && quality && (\n          <ProgressBar percent={quality} width={130} />\n        )}\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: \"Password\"\n};\n\nexport default PasswordInput;\n","export { default } from \"./PasswordInput\";\n","import React from \"react\";\n\n/** SVG Eye Icon */\nconst EyeIcon = () => {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 22 22\"\n    >\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default EyeIcon;\n","export { default } from \"./EyeIcon\";\n","module.exports =\n/* eslint-disable */\n[{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from \\\"react\\\";\\n\\n/** SVG Eye Icon */\\nconst EyeIcon = () => {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg\\n      width=\\\"16\\\"\\n      height=\\\"16\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 0 22 22\\\"\\n    >\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  );\\n};\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleEyeIcon\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport EyeIcon from \\\"ps-react/EyeIcon\\\";\\n\\nconst ExampleEyeIcon = () => {\\n  return <EyeIcon />;\\n};\\n\\nexport default ExampleEyeIcon;\\n\"\n  }]\n}, {\n  \"name\": \"FormItem\",\n  \"description\": \"\",\n  \"props\": {\n    \"inputName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"labelText\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  },\n  \"code\": \"import React, { useState } from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nconst FormItem = props => {\\n  return (\\n    <fieldset>\\n      <label htmlFor={props.inputName}>{props.labelText}</label>\\n      <input\\n        type=\\\"text\\\"\\n        name={props.inputName}\\n        onChange={e => props.onTextChange(e)}\\n      />\\n    </fieldset>\\n  );\\n};\\n\\nFormItem.propTypes = {\\n  inputName: PropTypes.string.isRequired,\\n  labelText: PropTypes.string.isRequired\\n};\\n\\nexport default FormItem;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React, { useState } from \\\"react\\\";\\nimport FormItem from \\\"ps-react/FormItem\\\";\\n\\nconst Example = () => {\\n  const [text, setText] = useState(\\\"\\\");\\n\\n  const onTextChangeHanlder = e => {\\n    if (e) e.preventDefault();\\n    setText(e.target.value);\\n  };\\n\\n  return (\\n    <FormItem\\n      inputName=\\\"firstname\\\"\\n      labelText=\\\"First Name\\\"\\n      onTextChange={onTextChangeHanlder}\\n    />\\n  );\\n};\\n\\nexport default Example;\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super lame component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to diplay\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React, { Component } from \\\"react\\\";\\nimport { PropTypes } from \\\"prop-types\\\";\\n\\n/** A super lame component that says Hello with a custom message. */\\nfunction HelloWorld({ message }) {\\n  return <div>Hello {message}</div>;\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to diplay */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: \\\"World\\\"\\n};\\n\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from \\\"react\\\";\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\n\\n/** Custom message */\\nconst ExampleHelloWorld = () => {\\n  return <HelloWorld message={\\\"you da man\\\"} />;\\n};\\n\\nexport default ExampleHelloWorld;\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** Label with required field display, htmlFor, and block styling */\\nconst Label = ({ htmlFor, label, required }) => {\\n  return (\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\n      {label} {required && <span style={{ color: \\\"red\\\" }}> *</span>}\\n    </label>\\n  );\\n};\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptionalLabel\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"ps-react/Label\\\";\\n\\nconst ExampleLabel = () => {\\n  return <Label required={false} label=\\\"Hello there!\\\" htmlFor=\\\"test\\\" />;\\n};\\n\\nexport default ExampleLabel;\\n\"\n  }, {\n    \"name\": \"ExampleRequiredLabel\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"ps-react/Label\\\";\\n\\nconst ExampleLabel = () => {\\n  return <Label required={true} label=\\\"Hello there!\\\" htmlFor=\\\"test\\\" />;\\n};\\n\\nexport default ExampleLabel;\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Password\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport ProgressBar from \\\"../ProgressBar\\\";\\nimport EyeIcon from \\\"../EyeIcon\\\";\\nimport TextInput from \\\"../TextInput\\\";\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    };\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  };\\n\\n  render() {\\n    const {\\n      htmlId,\\n      value,\\n      label,\\n      error,\\n      onChange,\\n      placeholder,\\n      maxLength,\\n      showVisibilityToggle,\\n      quality,\\n      ...props\\n    } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}\\n      >\\n        {showVisibilityToggle && (\\n          <a\\n            href=\\\"\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}\\n          >\\n            <EyeIcon />\\n          </a>\\n        )}\\n        {value.length > 0 && quality && (\\n          <ProgressBar percent={quality} width={130} />\\n        )}\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: \\\"Password\\\"\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from \\\"react\\\";\\nimport PasswordInput from \\\"ps-react/PasswordInput\\\";\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: \\\"\\\"\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/**Progress Bar */\\nclass ProgressBar extends React.Component {\\n  getColor = percent => {\\n    if (this.props.percent === 100) return \\\"green\\\";\\n    return this.props.percent > 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\n  };\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  };\\n\\n  render() {\\n    const { percent, width, height } = this.props;\\n    return (\\n      <div style={{ border: \\\"solid 1px lightgray\\\", width: width }}>\\n        <div\\n          style={{\\n            width: this.getWidthAsPercentOfTotalWidth(),\\n            height,\\n            backgroundColor: this.getColor(percent)\\n          }}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleProgressBar100Percent\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\nconst ExampleProgressBar = () => {\\n  return <ProgressBar width={100} height={25} percent={100} />;\\n};\\n\\n/**Example 100% */\\nexport default ExampleProgressBar;\\n\"\n  }, {\n    \"name\": \"ExampleProgressBar10Percent\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/**10% example */\\nconst ExampleProgressBar10Percent = () => {\\n  return <ProgressBar percent={10} width={100} height={25} />;\\n};\\n\\nexport default ExampleProgressBar10Percent;\\n\"\n  }, {\n    \"name\": \"ExampleProgressBar60Percent\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/**Example 60% */\\nconst ExampleProgressBar = () => {\\n  return <ProgressBar width={100} height={25} percent={60} />;\\n};\\n\\nexport default ExampleProgressBar;\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport TextInput from \\\"../TextInput\\\";\\nimport PasswordInput from \\\"../PasswordInput\\\";\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: \\\"\\\",\\n        password: \\\"\\\"\\n      },\\n      errors: {},\\n      submitted: false\\n    };\\n  }\\n\\n  onChange = event => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({ user });\\n  };\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(\\n      (password.length / this.props.minPasswordLength) * 100,\\n      10\\n    );\\n    return percentOfMinLength;\\n  }\\n\\n  validate({ email, password }) {\\n    const errors = {};\\n    const { minPasswordLength } = this.props;\\n\\n    if (!email) errors.email = \\\"Email required.\\\";\\n    if (password.length < minPasswordLength)\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({ errors });\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const { user } = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({ submitted: true });\\n    }\\n  };\\n\\n  render() {\\n    const { errors, submitted } = this.state;\\n    const { email, password } = this.state.user;\\n\\n    return submitted ? (\\n      <h2>{this.props.confirmationMessage}</h2>\\n    ) : (\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required\\n        />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password}\\n        />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    );\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n};\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport RegistrationForm from \\\"ps-react/RegistrationForm\\\";\\n\\nconst ExampleRegistrationForm = () => {\\n  const onSubmit = user => {\\n    console.log(user);\\n  };\\n  return <RegistrationForm onSubmit={onSubmit} />;\\n};\\n\\nexport default ExampleRegistrationForm;\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div style={{ marginBottom: 16 }}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: \\\"solid 1px red\\\" }}\\n        {...props}\\n      />\\n      {children}\\n      {error && (\\n        <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\n          {error}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react/TextInput\\\";\\n\\nconst ExampleError = () => {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      required\\n      onChange={() => {}}\\n      error=\\\"First name is required\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleError;\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react/TextInput\\\";\\n\\nconst ExampleOptional = () => {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n    />\\n  );\\n};\\n\\nexport default ExampleOptional;\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInputBEM({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && \\\"textinput__input--state-error\\\"}\\n        {...props}\\n      />\\n      {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n}\\n\\nTextInputBEM.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputBEM;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputBEM from \\\"ps-react/TextInputBEM\\\";\\n\\nconst ExampleError = () => {\\n  return (\\n    <TextInputBEM\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      required\\n      onChange={() => {}}\\n      error=\\\"First name is required\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleError;\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styles from \\\"./TextInput.css\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInputCSSModules({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}\\n      />\\n      {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n}\\n\\nTextInputCSSModules.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputCSSModules;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputCSSModules from \\\"ps-react/TextInputCSSModules\\\";\\n\\nconst ExampleError = () => {\\n  return (\\n    <TextInputCSSModules\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      required\\n      onChange={() => {}}\\n      error=\\\"First name is required\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleError;\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styled from \\\"styled-components\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInputStyledComponents({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  const Error = styled.div`\\n    color: red;\\n  `;\\n\\n  const Input = styled.input`\\n    border: ${error && \\\"solid 1px red\\\"};\\n    display: block;\\n  `;\\n\\n  const FieldSet = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <FieldSet>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: \\\"solid 1px red\\\" }}\\n        {...props}\\n      />\\n      {children}\\n      {error && <Error>{error}</Error>}\\n    </FieldSet>\\n  );\\n}\\n\\nTextInputStyledComponents.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputStyledComponents;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputStyledComponents from \\\"ps-react/TextInputStyledComponents\\\";\\n\\nconst ExampleError = () => {\\n  return (\\n    <TextInputStyledComponents\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      required\\n      onChange={() => {}}\\n      error=\\\"First name is required\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleError;\\n\"\n  }]\n}];","import React from \"react\";\nimport EyeIcon from \"ps-react/EyeIcon\";\n\nconst ExampleEyeIcon = () => {\n  return <EyeIcon />;\n};\n\nexport default ExampleEyeIcon;\n","import React from \"react\";\nimport Label from \"ps-react/Label\";\n\nconst ExampleLabel = () => {\n  return <Label required={false} label=\"Hello there!\" htmlFor=\"test\" />;\n};\n\nexport default ExampleLabel;\n","import React from \"react\";\nimport Label from \"ps-react/Label\";\n\nconst ExampleLabel = () => {\n  return <Label required={true} label=\"Hello there!\" htmlFor=\"test\" />;\n};\n\nexport default ExampleLabel;\n","import React from \"react\";\nimport PasswordInput from \"ps-react/PasswordInput\";\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: \"\"\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\nconst ExampleProgressBar = () => {\n  return <ProgressBar width={100} height={25} percent={100} />;\n};\n\n/**Example 100% */\nexport default ExampleProgressBar;\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/**10% example */\nconst ExampleProgressBar10Percent = () => {\n  return <ProgressBar percent={10} width={100} height={25} />;\n};\n\nexport default ExampleProgressBar10Percent;\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/**Example 60% */\nconst ExampleProgressBar = () => {\n  return <ProgressBar width={100} height={25} percent={60} />;\n};\n\nexport default ExampleProgressBar;\n","import React from \"react\";\nimport TextInput from \"ps-react/TextInput\";\n\nconst ExampleError = () => {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      required\n      onChange={() => {}}\n      error=\"First name is required\"\n    />\n  );\n};\n\nexport default ExampleError;\n","import React from \"react\";\nimport TextInput from \"ps-react/TextInput\";\n\nconst ExampleOptional = () => {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n    />\n  );\n};\n\nexport default ExampleOptional;\n","import React, { Component } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\n/** A super lame component that says Hello with a custom message. */\nfunction HelloWorld({ message }) {\n  return <div>Hello {message}</div>;\n}\n\nHelloWorld.propTypes = {\n  /** Message to diplay */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: \"World\"\n};\n\nexport default HelloWorld;\n","import React from \"react\";\nimport HelloWorld from \"ps-react/HelloWorld\";\n\n/** Custom message */\nconst ExampleHelloWorld = () => {\n  return <HelloWorld message={\"you da man\"} />;\n};\n\nexport default ExampleHelloWorld;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styled from \"styled-components\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInputStyledComponents({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  const Error = styled.div`\n    color: red;\n  `;\n\n  const Input = styled.input`\n    border: ${error && \"solid 1px red\"};\n    display: block;\n  `;\n\n  const FieldSet = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <FieldSet>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: \"solid 1px red\" }}\n        {...props}\n      />\n      {children}\n      {error && <Error>{error}</Error>}\n    </FieldSet>\n  );\n}\n\nTextInputStyledComponents.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledComponents;\n","import React from \"react\";\nimport TextInputStyledComponents from \"ps-react/TextInputStyledComponents\";\n\nconst ExampleError = () => {\n  return (\n    <TextInputStyledComponents\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      required\n      onChange={() => {}}\n      error=\"First name is required\"\n    />\n  );\n};\n\nexport default ExampleError;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FormItem = props => {\n  return (\n    <fieldset>\n      <label htmlFor={props.inputName}>{props.labelText}</label>\n      <input\n        type=\"text\"\n        name={props.inputName}\n        onChange={e => props.onTextChange(e)}\n      />\n    </fieldset>\n  );\n};\n\nFormItem.propTypes = {\n  inputName: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired\n};\n\nexport default FormItem;\n","import React, { useState } from \"react\";\nimport FormItem from \"ps-react/FormItem\";\n\nconst Example = () => {\n  const [text, setText] = useState(\"\");\n\n  const onTextChangeHanlder = e => {\n    if (e) e.preventDefault();\n    setText(e.target.value);\n  };\n\n  return (\n    <FormItem\n      inputName=\"firstname\"\n      labelText=\"First Name\"\n      onTextChange={onTextChangeHanlder}\n    />\n  );\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styles from \"./TextInput.css\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInputCSSModules({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}\n      />\n      {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n}\n\nTextInputCSSModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCSSModules;\n","import React from \"react\";\nimport TextInputCSSModules from \"ps-react/TextInputCSSModules\";\n\nconst ExampleError = () => {\n  return (\n    <TextInputCSSModules\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      required\n      onChange={() => {}}\n      error=\"First name is required\"\n    />\n  );\n};\n\nexport default ExampleError;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInputBEM({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && \"textinput__input--state-error\"}\n        {...props}\n      />\n      {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n}\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;\n","import React from \"react\";\nimport TextInputBEM from \"ps-react/TextInputBEM\";\n\nconst ExampleError = () => {\n  return (\n    <TextInputBEM\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      required\n      onChange={() => {}}\n      error=\"First name is required\"\n    />\n  );\n};\n\nexport default ExampleError;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../TextInput\";\nimport PasswordInput from \"../PasswordInput\";\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: \"\",\n        password: \"\"\n      },\n      errors: {},\n      submitted: false\n    };\n  }\n\n  onChange = event => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  };\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(\n      (password.length / this.props.minPasswordLength) * 100,\n      10\n    );\n    return percentOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = \"Email required.\";\n    if (password.length < minPasswordLength)\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  };\n\n  render() {\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return submitted ? (\n      <h2>{this.props.confirmationMessage}</h2>\n    ) : (\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required\n        />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password}\n        />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n};\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from \"react\";\nimport RegistrationForm from \"ps-react/RegistrationForm\";\n\nconst ExampleRegistrationForm = () => {\n  const onSubmit = user => {\n    console.log(user);\n  };\n  return <RegistrationForm onSubmit={onSubmit} />;\n};\n\nexport default ExampleRegistrationForm;\n","var map = {\n\t\"./EyeIcon/ExampleEyeIcon\": 18,\n\t\"./EyeIcon/ExampleEyeIcon.js\": 18,\n\t\"./FormItem/Example\": 29,\n\t\"./FormItem/Example.js\": 29,\n\t\"./HelloWorld/ExampleHelloWorld\": 27,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 27,\n\t\"./Label/ExampleOptionalLabel\": 19,\n\t\"./Label/ExampleOptionalLabel.js\": 19,\n\t\"./Label/ExampleRequiredLabel\": 20,\n\t\"./Label/ExampleRequiredLabel.js\": 20,\n\t\"./PasswordInput/ExampleAllFeatures\": 21,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 21,\n\t\"./ProgressBar/ExampleProgressBar100Percent\": 22,\n\t\"./ProgressBar/ExampleProgressBar100Percent.js\": 22,\n\t\"./ProgressBar/ExampleProgressBar10Percent\": 23,\n\t\"./ProgressBar/ExampleProgressBar10Percent.js\": 23,\n\t\"./ProgressBar/ExampleProgressBar60Percent\": 24,\n\t\"./ProgressBar/ExampleProgressBar60Percent.js\": 24,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 32,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 32,\n\t\"./TextInput/ExampleError\": 25,\n\t\"./TextInput/ExampleError.js\": 25,\n\t\"./TextInput/ExampleOptional\": 26,\n\t\"./TextInput/ExampleOptional.js\": 26,\n\t\"./TextInputBEM/ExampleError\": 31,\n\t\"./TextInputBEM/ExampleError.js\": 31,\n\t\"./TextInputCSSModules/ExampleError\": 30,\n\t\"./TextInputCSSModules/ExampleError.js\": 30,\n\t\"./TextInputStyledComponents/ExampleError\": 28,\n\t\"./TextInputStyledComponents/ExampleError.js\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 43;","import React, { Component } from \"react\";\n\nconst Navigation = ({ components }) => {\n  return (\n    <ul className=\"navigation\">\n      {components.map(name => {\n        return (\n          <li key={name}>\n            <a href={`#${name}`}>{name}</a>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage(\"javascript\", javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre\n        ref={ref => {\n          this.element = ref;\n        }}\n      >\n        <code>{this.props.children}</code>\n      </pre>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default CodeExample;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CodeExample from \"./CodeExample\";\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${\n      this.props.componentName\n    }/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Example from \"./Example\";\nimport Props from \"./Props\";\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {examples.length > 0\n        ? examples.map(example => (\n            <Example\n              key={example.code}\n              example={example}\n              componentName={name}\n            />\n          ))\n        : \"No examples exist.\"}\n\n      <h3>Props</h3>\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\n    </div>\n  );\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport ComponentPage from \"./ComponentPage\";\nimport componentData from \"../../config/componentData\";\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState({ route: window.location.hash.substr(1) });\n    });\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route\n      ? componentData.filter(component => component.name === route)[0]\n      : componentData[0];\n    console.log(component);\n    return (\n      <div>\n        <Navigation\n          components={componentData.map(component => component.name)}\n        />\n        <ComponentPage component={component} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\n\nReactDOM.render(<Docs />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}